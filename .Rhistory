soil = c("defs/soil_clay.def","defs/soil_clayloam.def","defs/soil_loam.def","defs/soil_loamysand.def","defs/soil_rock.def","defs/soil_sand.def","defs/soil_sandyclay.def","defs/soil_sandyclayloam.def","defs/soil_sandyloam.def","defs/soil_silt.def","defs/soil_siltyclay.def","defs/soil_siltyclayloam.def","defs/soil_siltyloam.def","defs/soil_water.def", "defs/soil_shallowloam.def", "defs/soil_shallowsandyclayloam.def", "defs/soil_shallowsandyloam.def"),
landuse = c("defs/lu_undev.def","defs/lu_agriculture.def","defs/lu_raingarden.def","defs/lu_urban.def"),
stratum = c("defs/veg_deciduous/veg_deciduous.def","defs/veg_evergreen/veg_evergreen.def","defs/veg_deciduous_BES.def","defs/veg_eucalypt.def","defs/veg_grass.def","defs/veg_lawn_2cm.def","defs/veg_lawn_5cm.def","defs/veg_lawn_10cm.def","defs/veg_nonveg.def"),
basestations = "clim/cwtws32local.base")
input_hdr
input_rhessys = IOin_rhessys_input(
version = "rh_dev/rhessys/rhessys7.4",
tec_file = "tecfiles/tec.test",
world_file = "worldfiles/w8TC.world",
world_hdr_prefix = "w8TC",
flowtable = "flowtables/w8TC.flow",
start = "1988 9 30 1",
end = "2000 10 1 1",
output_folder = "out/",
output_prefix = "w8TC",
commandline_options = c("-g")
)
# Along with paths to the other basic inputs, this is the simplest way to assemble a rhessys run, though is limited in its options
run_rhessys_single(
input_rhessys = input_rhessys,
hdr_files = "worldfiles/w8TC.hdr",
output_filter = "tecfiles/testing_filter.yml"
)
input_rhessys = IOin_rhessys_input(
version = "rh_dev/rhessys/rhessys7.4",
tec_file = "tecfiles/tec.test",
world_file = "worldfiles/w8TC.world",
world_hdr_prefix = "w8TC",
flowtable = "flowtables/w8TC.flow",
start = "1988 9 30 1",
end = "2000 10 1 1",
output_folder = "out/",
output_prefix = "w8TC",
commandline_options = c("-g")
)
input_hdr = IOin_hdr(
basin = "defs/basin.def",
hillslope = "defs/hill.def",
zone = "defs/zone.def",
soil = "defs/soil_sandyloam.def",
landuse = "defs/lu_undev.def",
stratum = "defs/veg_douglasfir.def",
basestations = "clim/w8_base")
# Along with paths to the other basic inputs, this is the simplest way to assemble a rhessys run, though is limited in its options
run_rhessys_single(
input_rhessys = input_rhessys,
hdr_files = "worldfiles/w8TC.hdr",
output_filter = "tecfiles/testing_filter.yml"
)
# Along with paths to the other basic inputs, this is the simplest way to assemble a rhessys run, though is limited in its options
run_rhessys_single(
input_rhessys = input_rhessys,
hdr_files = input_hdr,
output_filter = "tecfiles/testing_filter.yml"
)
input_rhessys = IOin_rhessys_input(
version = "rh_dev/rhessys/rhessys7.4",
tec_file = "rh_dev/testing/tecfiles/tec.test",
world_file = "rh_dev/testing/worldfiles/w8TC.world",
world_hdr_prefix = "w8TC",
flowtable = "rh_dev/testing/flowtables/w8TC.flow",
start = "1988 9 30 1",
end = "2000 10 1 1",
output_folder = "rh_dev/testing/out/",
output_prefix = "w8TC",
commandline_options = c("-g")
)
input_hdr = IOin_hdr(
basin = "rh_dev/testing/defs/basin.def",
hillslope = "rh_dev/testing/defs/hill.def",
zone = "rh_dev/testing/defs/zone.def",
soil = "rh_dev/testing/defs/soil_sandyloam.def",
landuse = "rh_dev/testing/defs/lu_undev.def",
stratum = "rh_dev/testing/defs/veg_douglasfir.def",
basestations = "rh_dev/testing/clim/w8_base")
# Along with paths to the other basic inputs, this is the simplest way to assemble a rhessys run, though is limited in its options
run_rhessys_single(
input_rhessys = input_rhessys,
hdr_files = input_hdr,
output_filter = "rh_dev/testing/tecfiles/testing_filter.yml"
)
input_rhessys = IOin_rhessys_input(
version = "rh_dev/rhessys/rhessys7.4",
tec_file = "rh_dev/testing/tecfiles/tec.test",
world_file = "rh_dev/testing/worldfiles/w8TC.world",
world_hdr_prefix = "w8TC",
flowtable = "rh_dev/testing/flowtables/w8TC.flow",
start = "1988 9 30 1",
end = "2000 10 1 1",
output_folder = "rh_dev/testing/out/",
output_prefix = "w8TC",
commandline_options = c("-g")
)
input_hdr = IOin_hdr(
basin = "rh_dev/testing/defs/basin.def",
hillslope = "rh_dev/testing/defs/hill.def",
zone = "rh_dev/testing/defs/zone.def",
soil = "rh_dev/testing/defs/soil_sandyloam.def",
landuse = "rh_dev/testing/defs/lu_undev.def",
stratum = "rh_dev/testing/defs/veg_douglasfir.def",
basestations = "rh_dev/testing/clim/w8_base")
# Along with paths to the other basic inputs, this is the simplest way to assemble a rhessys run, though is limited in its options
run_rhessys_single(
input_rhessys = input_rhessys,
hdr_files = input_hdr,
output_filter = "rh_dev/testing/tecfiles/testing_filter.yml",
tec_data = input_tec_data
)
# Along with paths to the other basic inputs, this is the simplest way to assemble a rhessys run, though is limited in its options
run_rhessys_single(
input_rhessys = input_rhessys,
hdr_files = input_hdr,
output_filter = "rh_dev/testing/tecfiles/testing_filter.yml",
tec_data = "rh_dev/testing/tec"
)
input_tec_data = IOin_tec_std(start = "1988 10 1 2",
end = "2000 9 30 24",
output_state = TRUE)
input_hdr = IOin_hdr(
basin = "rh_dev/testing/defs/basin.def",
hillslope = "rh_dev/testing/defs/hill.def",
zone = "rh_dev/testing/defs/zone.def",
soil = "rh_dev/testing/defs/soil_sandyloam.def",
landuse = "rh_dev/testing/defs/lu_undev.def",
stratum = "rh_dev/testing/defs/veg_douglasfir.def",
basestations = "rh_dev/testing/clim/w8_base")
# read an existing filter file
filter1 = read_output_filter(filter_in = "tecfiles/testing_filter.yml")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#install.packages("devtools")
#devtools::install_github("ropensci/FedData")
library(aqp)
library(daymetr)
library(clhs)
library(EcoHydRology)
library(elevatr)
library(ezknitr)
library(FedData)
library(foreach)
library(foreign)
library(ggplot2)
library(ggpubr)
library(hydroGOF)
library(imputeTS)
library(knitr)
library(latticeExtra)
library(lubridate)
library(Metrics)
library(raster)
library(rasterVis)
library(readxl)
library(reshape2)
library(rgdal)
library(rgrass)
library(rmarkdown)
library(Rmisc)
library(RHESSysPreprocessing)
library(RHESSysIOinR)
library(sf)
library(soilDB)
library(sp)
library(stats)
library(stringi)
library(tactile)
library(terra)
library(testthat)
library(tidyverse)
library(viridisLite)
library(dplyr)
knitr::opts_knit$set(root.dir = system.file("extdata/", package = "RHESSysIOinR"))
## Prep RHESSys
expect_file_exists = function(path) {
# 1. Capture object and label
act <- quasi_label(rlang::enquo(path), arg = "path")
# 2. Call expect()
expect(
file.exists(act$val),
sprintf("%s file does not exist.", act$lab)
)
# 3. Invisibly return the value
invisible(act$val)
}
expect_file_sizeKB_gt = function(path, size_KB) {
# 1. Capture object and label
act <- quasi_label(rlang::enquo(path), arg = "path")
# 2. Call expect()
expect(
(file.size(act$val) / 1024) > size_KB,
sprintf("%s file is not greater than %f KB.", act$lab, size_KB)
)
# 3. Invisibly return the value
invisible(act$val)
}
setwd(system.file("extdata/", package = "RHESSysIOinR"))
### Downloads most recent version of RHESSYs
# gert::git_clone(url = "https://github.com/RHESSys/RHESSys", path = "./rh_dev", branch = "master")
### Make sure to change files in rh_dev to 5.18 if using older RHESSys files
# compile_rhessys(location = "rh_dev/")
rh_ver = dir(path = "rh_dev/rhessys/", pattern = "^rhessys\\d+",recursive = F)
rh_ver
test_that("compile_rhessys works + rhessys compiles via R system", {
expect_gt(length(rh_ver), 0)
})
rh_path = file.path("rh_dev/rhessys/", rh_ver)
## Load in necessary files
getwd()
setwd(system.file("extdata/", package = "RHESSysIOinR"))
filedir <- ("C:/Users/Carlos/Documents/GitHub/RHESSys74-R-Markdown/")
watershedshapefile <- paste0(filedir, "input_files/shapefiles/watersheds/Coweeta_Hydrologic_Laboratory.shp")
streamshapefile<- paste0(filedir,"input_files/shapefiles/streams/StreamsCaldwellClipped.shp")
weirshapefile<- paste0(filedir,"input_files/shapefiles/weirs/Subbasinoutlets.shp")
roadshapefile <- paste0(filedir, "input_files/shapefiles/roads/UpdatedRoads4Reprojected32617.shp")
CWRG12 <- paste0(filedir,"input_files/precipitation/RDS-2017-0031/Data/RG12_daily_1942_2021.csv")
CWRG20 <-paste0(filedir,"input_files/precipitation/RDS-2017-0031/Data/RG20_daily_1962_2021.csv")
CS01 <- ("C:/Users/Carlos/Desktop/ORISE/Climate Data/CW/Air Temperature/CS01 OISHI/cs01_hourly_Tair_2011_2023.csv")
CS01LT<- ("C:/Users/Carlos/Desktop/ORISE/Climate Data/CW/Air Temperature/RDS-2015-0049/Data/cs01_daily_airtemp.csv")
CS21<- paste0(filedir,"input_files/temperature/RDS-2015-0042/Data/cs21_daily.csv")
CS28<- paste0(filedir,"input_files/temperature/RDS-2015-0042/Data/cs28_daily.csv")
newsmlocations<-  paste0(filedir,"input_files/shapefiles/soil_moisture/CoweetaNRCSsmKML.kml")
read_clim("clim/cwtws32daymet.rain", dates_out = TRUE)
input_rhessys = IOin_rhessys_input(
version = rh_path,
tec_file = "tecfiles/tec_daily",
world_file = "CWWS32dsm.world.Y2018M10D31H1.state.Y2018M10D31H1.state",
world_hdr_prefix = "CWWS32dsm",
flowtable = "CWWS32dsm1.flow",
start = "2014 11 1 1",
end = "2018 11 1 1",
output_folder = "out",
output_prefix = "cwws32dsm",
commandline_options = c("-b -p"))
## TEC file dictates model output, begin output a year in to allow model SM to stabilize
# do not output_state or worldfile may be overwritten as output is created
input_tec_data = IOin_tec_std(start = "2015 11 1 1",
end = "2018 11 1 1",
output_state = FALSE)
input_hdr = IOin_hdr(
basin = "defs/basin.def",
hillslope = "defs/hillslope.def",
zone = "defs/zone.def",
soil = c("defs/soil_clay.def","defs/soil_clayloam.def","defs/soil_loam.def","defs/soil_loamysand.def","defs/soil_rock.def","defs/soil_sand.def","defs/soil_sandyclay.def","defs/soil_sandyclayloam.def","defs/soil_sandyloam.def","defs/soil_silt.def","defs/soil_siltyclay.def","defs/soil_siltyclayloam.def","defs/soil_siltyloam.def","defs/soil_water.def", "defs/soil_shallowloam.def", "defs/soil_shallowsandyclayloam.def", "defs/soil_shallowsandyloam.def"),
landuse = "defs/lu_undev.def",
stratum = c("defs/veg_deciduous/veg_deciduous.def","defs/veg_evergreen/veg_evergreen.def","defs/veg_deciduous_BES.def","defs/veg_eucalypt.def","defs/veg_grass.def","defs/veg_lawn_2cm.def","defs/veg_lawn_5cm.def","defs/veg_lawn_10cm.def","defs/veg_nonveg.def"),
basestations = "clim/cwtws32local.base")
stdpars<- IOin_std_pars(
m = 1.75,
k = 18.69,
soil_dep= 0.48,
m_v = 2.55,
k_v = 7.54,
gw1 = 0.19,
gw2 = 0.29,
pa = 0.17,
po = 1.02,
vgseng1 = 1.61,
vgseng2 = 1.94,
vgseng3 = 0.72)
setwd(system.file("extdata/", package = "RHESSysIOinR"))
input_rhessys = IOin_rhessys_input(
version = rh_path,
tec_file = "tecfiles/tec_daily",
world_file = "CWWS32dsm.world.Y2018M10D31H1.state.Y2018M10D31H1.state",
world_hdr_prefix = "CWWS32dsm",
flowtable = "CWWS32dsm1.flow",
start = "2014 11 1 1",
end = "2018 11 1 1",
output_folder = "out",
output_prefix = "cwws32dsm",
commandline_options = c())
input_tec_data = IOin_tec_std(start = "2015 11 1 1",
end = "2018 11 1 1",
output_state = FALSE)
input_hdr = IOin_hdr(
basin = "defs/basin.def",
hillslope = "defs/hillslope.def",
zone = "defs/zone.def",
soil = c("defs/soil_clay.def","defs/soil_clayloam.def","defs/soil_loam.def","defs/soil_loamysand.def","defs/soil_rock.def","defs/soil_sand.def","defs/soil_sandyclay.def","defs/soil_sandyclayloam.def","defs/soil_sandyloam.def","defs/soil_silt.def","defs/soil_siltyclay.def","defs/soil_siltyclayloam.def","defs/soil_siltyloam.def","defs/soil_water.def", "defs/soil_shallowloam.def", "defs/soil_shallowsandyclayloam.def", "defs/soil_shallowsandyloam.def"),
landuse = "defs/lu_undev.def",
stratum = c("defs/veg_deciduous/veg_deciduous.def","defs/veg_evergreen/veg_evergreen.def","defs/veg_deciduous_BES.def","defs/veg_eucalypt.def","defs/veg_grass.def","defs/veg_lawn_2cm.def","defs/veg_lawn_5cm.def","defs/veg_lawn_10cm.def","defs/veg_nonveg.def"),
basestations = "clim/cwtws32local.base")
stdpars<- IOin_std_pars(
m = 1.75,
k = 18.69,
soil_dep= 0.48,
m_v = 2.55,
k_v = 7.54,
gw1 = 0.19,
gw2 = 0.29,
pa = 0.17,
po = 1.02,
vgseng1 = 1.61,
vgseng2 = 1.94,
vgseng3 = 0.72)
#patch.streamflow + hill.gw.Qout
patchfilter <- build_output_filter(timestep = "daily", output_format= "csv", output_path = "../out", output_filename = "testfbasinstreamflow", spatial_level = "basin",spatial_ID = "1", variables = "base_flow" )
patchfilter
patchfilter2<- read_output_filter("C:/Users/Carlos/Downloads/RHESSysIOinR-main/RHESSysIOinR-main/p301h2_filter.yml")
patchfilter2
start_time = Sys.time()
start_time
run_rhessys_single(input_rhessys = input_rhessys,
hdr_files = input_hdr,
tec_data = input_tec_data,
std_pars = stdpars,
output_filter = patchfilter,
runID = 'single')
end_time = Sys.time()
end_time - start_time
end_time
patchfilter
output_filter
# for just a single filter with named filter file
output_filter = IOin_output_filters(filter2, file_name = "tecfiles/test_output_filter.yml")
patchfilter2<- read_output_filter("rh_dev/testing/tecfiles/testing_filter.yml"")
)
)
""
patchfilter2<- read_output_filter("rh_dev/testing/tecfiles/testing_filter.yml")
patchfilter2
patchfilter <- build_output_filter(timestep = "daily", output_format= "csv", output_path = "../out", output_filename = "testfbasinstreamflow", spatial_level = "basin",spatial_ID = "1", variables = "patch.total_water_in" )
patchfilter <- build_output_filter(timestep = "daily", output_format= "csv", output_path = "../out", output_filename = "testfbasinstreamflow", spatial_level = "basin",spatial_ID = "1", variables = "patch.total_water_in" )
patchfilter
start_time = Sys.time()
start_time
run_rhessys_single(input_rhessys = input_rhessys,
hdr_files = input_hdr,
tec_data = input_tec_data,
std_pars = stdpars,
output_filter = patchfilter,
runID = 'single')
end_time = Sys.time()
end_time - start_time
end_time
input_rhessys = IOin_rhessys_input(
version = "rh_dev/rhessys/rhessys7.4",
tec_file = "rh_dev/testing/tecfiles/tec.test",
world_file = "rh_dev/testing/worldfiles/w8TC.world",
world_hdr_prefix = "w8TC",
flowtable = "rh_dev/testing/flowtables/w8TC.flow",
start = "1988 9 30 1",
end = "2000 10 1 1",
output_folder = "rh_dev/testing/out/",
output_prefix = "w8TC",
commandline_options = c("-g")
)
# Along with paths to the other basic inputs, this is the simplest way to assemble a rhessys run, though is limited in its options
run_rhessys_single(
input_rhessys = input_rhessys,
hdr_files = input_hdr,
output_filter = "rh_dev/testing/tecfiles/testing_filter.yml",
tec_data = "rh_dev/testing/tec"
)
# Along with paths to the other basic inputs, this is the simplest way to assemble a rhessys run, though is limited in its options
run_rhessys_single(
input_rhessys = input_rhessys,
hdr_files = input_hdr,
output_filter = "rh_dev/testing/tecfiles/testing_filter2.yml",
tec_data = "rh_dev/testing/tec"
)
patchfilter2<- read_output_filter("rh_dev/testing/tecfiles/testing_filter2.yml")
patchfilter2
patchfilter2<- read_output_filter("rh_dev/testing/tecfiles/testing_filter2.yml")
patchfilter2<- read_output_filter("rh_dev/Testing/tecfiles/testing_filter2.yml")
patchfilter2<- read_output_filter("tecfiles/testing_filter2.yml")
patchfilter2
start_time = Sys.time()
start_time
run_rhessys_single(input_rhessys = input_rhessys,
hdr_files = input_hdr,
tec_data = input_tec_data,
std_pars = stdpars,
output_filter = patchfilter,
runID = 'single')
end_time = Sys.time()
end_time - start_time
end_time
setwd(system.file("extdata/", package = "RHESSysIOinR"))
input_rhessys = IOin_rhessys_input(
version = rh_path,
tec_file = "tecfiles/tec_daily",
world_file = "CWWS32dsm.world.Y2018M10D31H1.state.Y2018M10D31H1.state",
world_hdr_prefix = "CWWS32dsm",
flowtable = "CWWS32dsm1.flow",
start = "2014 11 1 1",
end = "2018 11 1 1",
output_folder = "out",
output_prefix = "cwws32dsm",
commandline_options = c())
input_tec_data = IOin_tec_std(start = "2015 11 1 1",
end = "2018 11 1 1",
output_state = FALSE)
input_hdr = IOin_hdr(
basin = "defs/basin.def",
hillslope = "defs/hillslope.def",
zone = "defs/zone.def",
soil = c("defs/soil_clay.def","defs/soil_clayloam.def","defs/soil_loam.def","defs/soil_loamysand.def","defs/soil_rock.def","defs/soil_sand.def","defs/soil_sandyclay.def","defs/soil_sandyclayloam.def","defs/soil_sandyloam.def","defs/soil_silt.def","defs/soil_siltyclay.def","defs/soil_siltyclayloam.def","defs/soil_siltyloam.def","defs/soil_water.def", "defs/soil_shallowloam.def", "defs/soil_shallowsandyclayloam.def", "defs/soil_shallowsandyloam.def"),
landuse = "defs/lu_undev.def",
stratum = c("defs/veg_deciduous/veg_deciduous.def","defs/veg_evergreen/veg_evergreen.def","defs/veg_deciduous_BES.def","defs/veg_eucalypt.def","defs/veg_grass.def","defs/veg_lawn_2cm.def","defs/veg_lawn_5cm.def","defs/veg_lawn_10cm.def","defs/veg_nonveg.def"),
basestations = "clim/cwtws32local.base")
stdpars<- IOin_std_pars(
m = 1.75,
k = 18.69,
soil_dep= 0.48,
m_v = 2.55,
k_v = 7.54,
gw1 = 0.19,
gw2 = 0.29,
pa = 0.17,
po = 1.02,
vgseng1 = 1.61,
vgseng2 = 1.94,
vgseng3 = 0.72)
#patch.streamflow + hill.gw.Qout
patchfilter <- build_output_filter(timestep = "daily", output_format= "csv", output_path = "../out", output_filename = "testfbasinstreamflow", spatial_level = "basin",spatial_ID = "1", variables = "patch.total_water_in" )
patchfilter
patchfilter2<- read_output_filter("tecfiles/testing_filter2.yml")
patchfilter2
start_time = Sys.time()
start_time
run_rhessys_single(input_rhessys = input_rhessys,
hdr_files = input_hdr,
tec_data = input_tec_data,
std_pars = stdpars,
output_filter = patchfilter,
runID = 'single')
end_time = Sys.time()
end_time - start_time
end_time
input_rhessys = IOin_rhessys_input(
version = "rh_dev/rhessys/rhessys7.4",
tec_file = "rh_dev/testing/tecfiles/tec.test",
world_file = "rh_dev/testing/worldfiles/w8TC.world",
world_hdr_prefix = "w8TC",
flowtable = "rh_dev/testing/flowtables/w8TC.flow",
start = "1988 9 30 1",
end = "2000 10 1 1",
output_folder = "rh_dev/testing/out/",
output_prefix = "w8TC",
commandline_options = c("-g")
)
# Along with paths to the other basic inputs, this is the simplest way to assemble a rhessys run, though is limited in its options
run_rhessys_single(
input_rhessys = input_rhessys,
hdr_files = input_hdr,
output_filter = "rh_dev/testing/tecfiles/testing_filter.yml",
tec_data = "rh_dev/testing/tec"
)
# to clone and checkout develop branch, a bit slow for some reason
#gert::git_clone(url = "https://github.com/RHESSys/RHESSys", path = "C:/Users/Carlos/Documents/R/win-library/4.0/RHESSysIOinR/extdata/rh_dev", branch = "trunk")
# Set working dir to the testing folder
knitr::opts_knit$set(root.dir = system.file("extdata/", package = "RHESSysIOinR"))
knitr::opts_chunk$set(echo = F, results = 'hide', eval = F)
# Set working dir to the testing folder
knitr::opts_knit$set(root.dir = system.file("extdata/", package = "RHESSysIOinR"))
# to clone and checkout develop branch, a bit slow for some reason
#gert::git_clone(url = "https://github.com/RHESSys/RHESSys", path = "C:/Users/Carlos/Documents/R/win-library/4.0/RHESSysIOinR/extdata/rh_dev", branch = "trunk")
# Set working dir to the testing folder
knitr::opts_knit$set(root.dir = system.file("extdata/", package = "RHESSysIOinR"))
input_rhessys = IOin_rhessys_input(
version = "rh_dev/rhessys/rhessys7.4",
tec_file = "rh_dev/testing/tecfiles/tec.test",
world_file = "rh_dev/testing/worldfiles/w8TC.world",
world_hdr_prefix = "w8TC",
flowtable = "rh_dev/testing/flowtables/w8TC.flow",
start = "1988 9 30 1",
end = "2000 10 1 1",
output_folder = "rh_dev/testing/out/",
output_prefix = "w8TC",
commandline_options = c("-g")
)
# Along with paths to the other basic inputs, this is the simplest way to assemble a rhessys run, though is limited in its options
run_rhessys_single(
input_rhessys = input_rhessys,
hdr_files = input_hdr,
output_filter = "rh_dev/testing/tecfiles/testing_filter.yml",
tec_data = "rh_dev/testing/tec"
)
input_tec_data = IOin_tec_std(start = "1988 10 1 2",
end = "2000 9 30 24",
output_state = TRUE)
input_hdr = IOin_hdr(
basin = "rh_dev/testing/defs/basin.def",
hillslope = "rh_dev/testing/defs/hill.def",
zone = "rh_dev/testing/defs/zone.def",
soil = "rh_dev/testing/defs/soil_sandyloam.def",
landuse = "rh_dev/testing/defs/lu_undev.def",
stratum = "rh_dev/testing/defs/veg_douglasfir.def",
basestations = "rh_dev/testing/clim/w8_base")
# read an existing filter file
filter1 = read_output_filter(filter_in = "tecfiles/testing_filter.yml")
# equivalent:
# filter = IOin_output_filters(filter_in = "tecfiles/testing_filter.yml")
# create a new filter R object
filter2 = build_output_filter(
timestep = "daily",
output_format = "csv",
output_path = "../Testing/out",
output_filename = "basin_daily",
spatial_level = "basin",
spatial_ID = as.integer("1"),
variables = c("patch.total_water_in", "patch.streamflow", "patch.evaporation")
)
# modify an existing filter, either from file or R object, and return R obj
# all options left null (the default) will use the existing value.
filter3 = modify_output_filter(
filter_in = "tecfiles/testing_filter.yml",
variables = c("patch.total_water_in", "patch.streamflow", "patch.evaporation")
)
# combine output filters and create object ready to input to run_rhessys_single/multi
filter4 = IOin_output_filters(filter2, filter_in = "tecfiles/testing_filter.yml", file_name = "test_output_filters")
# for just a single filter with named filter file
output_filter = IOin_output_filters(filter2, file_name = "tecfiles/test_output_filter.yml")
